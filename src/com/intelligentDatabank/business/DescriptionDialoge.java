/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.intelligentDatabank.business;

import com.intelligentDatabank.dao.DisciplineDAO;
import com.intelligentDatabank.dao.GroupDAO;
import com.intelligentDatabank.dao.QuestionLevelDAO;
import com.intelligentDatabank.dao.impl.PaperDescriptionDAOImpl;
import com.intelligentDatabank.dao.impl.DisciplineDAOImpl;
import com.intelligentDatabank.dao.impl.GroupDAOImpl;
import com.intelligentDatabank.models.DisciplineModel;
import com.intelligentDatabank.models.GroupModel;
import com.intelligentDatabank.models.PaperDescriptionModel;
import com.intelligentDatabank.models.QuestionLevelModel;
import com.intelligentDatabank.dao.PaperDescriptionDAO;
import com.intelligentDatabank.dao.impl.QuestionLevelDAOImpl;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.List;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Akash
 */
public class DescriptionDialoge extends javax.swing.JDialog {

    private Integer paperDescriptionId;

    /**
     * Creates new form DescriptionDialoge
     */
    public DescriptionDialoge(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        populateDisciplineCombo();
        populateGroupCombo();
        populateQuestionLevelCombo();
        populateDescriptionTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backgroundPanel = new javax.swing.JPanel();
        btnUpdate = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnLabel = new javax.swing.JLabel();
        headingLabel = new javax.swing.JLabel();
        lbDescription = new javax.swing.JLabel();
        txtDescription = new javax.swing.JTextField();
        lbRemarks = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtRemarks = new javax.swing.JTextArea();
        tablePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        descriptionTable = new javax.swing.JTable();
        comboYear = new javax.swing.JComboBox<>();
        comboDesicipline = new javax.swing.JComboBox<>();
        comboGroup = new javax.swing.JComboBox<>();
        comboQuestionLevel = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        backgroundPanel.setBackground(new java.awt.Color(255, 255, 255));
        backgroundPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnUpdate.setBackground(new java.awt.Color(255, 255, 255));
        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/intelligentDatabank/icons/update.png"))); // NOI18N
        btnUpdate.setText("UDATE PAPER");
        btnUpdate.setEnabled(false);
        btnUpdate.setOpaque(false);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        backgroundPanel.add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 250, 230, 40));

        btnAdd.setBackground(new java.awt.Color(255, 255, 255));
        btnAdd.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/intelligentDatabank/icons/save.png"))); // NOI18N
        btnAdd.setText("ADD PAPER");
        btnAdd.setOpaque(false);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        backgroundPanel.add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 190, 230, 40));

        btnDelete.setBackground(new java.awt.Color(255, 255, 255));
        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/intelligentDatabank/icons/delete.png"))); // NOI18N
        btnDelete.setText("DELETE PAPER");
        btnDelete.setEnabled(false);
        btnDelete.setOpaque(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        backgroundPanel.add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 310, 230, 40));

        btnClear.setBackground(new java.awt.Color(255, 255, 255));
        btnClear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/intelligentDatabank/icons/reset.png"))); // NOI18N
        btnClear.setText("CLEAR");
        btnClear.setOpaque(false);
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        backgroundPanel.add(btnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 370, 230, 40));

        btnLabel.setBackground(new java.awt.Color(47, 79, 79));
        btnLabel.setOpaque(true);
        backgroundPanel.add(btnLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 0, 310, 580));

        headingLabel.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        headingLabel.setForeground(new java.awt.Color(47, 79, 79));
        headingLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headingLabel.setText("Paper Description");
        backgroundPanel.add(headingLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 10, 340, 50));

        lbDescription.setFont(new java.awt.Font("Yu Gothic", 1, 18)); // NOI18N
        lbDescription.setForeground(new java.awt.Color(47, 79, 79));
        lbDescription.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbDescription.setText("Description :");
        backgroundPanel.add(lbDescription, new org.netbeans.lib.awtextra.AbsoluteConstraints(87, 90, -1, 30));

        txtDescription.setFont(new java.awt.Font("Yu Gothic", 0, 18)); // NOI18N
        txtDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescriptionActionPerformed(evt);
            }
        });
        backgroundPanel.add(txtDescription, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 80, 310, 40));

        lbRemarks.setFont(new java.awt.Font("Yu Gothic", 1, 18)); // NOI18N
        lbRemarks.setForeground(new java.awt.Color(47, 79, 79));
        lbRemarks.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbRemarks.setText("Remarks :");
        backgroundPanel.add(lbRemarks, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 130, 90, 30));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        txtRemarks.setColumns(20);
        txtRemarks.setFont(new java.awt.Font("Yu Gothic", 0, 18)); // NOI18N
        txtRemarks.setRows(2);
        txtRemarks.setTabSize(2);
        jScrollPane1.setViewportView(txtRemarks);

        backgroundPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 130, 310, 140));

        tablePanel.setBackground(new java.awt.Color(255, 255, 255));
        tablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(47, 79, 79)), "DESCRIPTION DETAILS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic", 1, 14), new java.awt.Color(47, 79, 79))); // NOI18N
        tablePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        descriptionTable.setFont(new java.awt.Font("Yu Gothic", 0, 14)); // NOI18N
        descriptionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        descriptionTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        descriptionTable.setFocusable(false);
        descriptionTable.setRowHeight(20);
        descriptionTable.setSelectionBackground(new java.awt.Color(47, 79, 79));
        descriptionTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        descriptionTable.setShowVerticalLines(false);
        descriptionTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                descriptionTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(descriptionTable);

        tablePanel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 810, 260));

        backgroundPanel.add(tablePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 270, 830, 300));

        comboYear.setBackground(backgroundPanel.getBackground());
        comboYear.setFont(new java.awt.Font("Yu Gothic", 1, 18)); // NOI18N
        comboYear.setForeground(new java.awt.Color(47, 79, 79));
        comboYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Year", "2015", "2016", "2017", "2018" }));
        comboYear.setToolTipText("");
        backgroundPanel.add(comboYear, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 230, 330, 40));

        comboDesicipline.setBackground(backgroundPanel.getBackground());
        comboDesicipline.setFont(new java.awt.Font("Yu Gothic", 1, 18)); // NOI18N
        comboDesicipline.setForeground(new java.awt.Color(47, 79, 79));
        comboDesicipline.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Descipline" }));
        comboDesicipline.setToolTipText("");
        comboDesicipline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboDesiciplineActionPerformed(evt);
            }
        });
        backgroundPanel.add(comboDesicipline, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 80, 330, 40));

        comboGroup.setBackground(backgroundPanel.getBackground());
        comboGroup.setFont(new java.awt.Font("Yu Gothic", 1, 18)); // NOI18N
        comboGroup.setForeground(new java.awt.Color(47, 79, 79));
        comboGroup.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Group" }));
        comboGroup.setToolTipText("");
        comboGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboGroupActionPerformed(evt);
            }
        });
        backgroundPanel.add(comboGroup, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 130, 330, 40));

        comboQuestionLevel.setBackground(backgroundPanel.getBackground());
        comboQuestionLevel.setFont(new java.awt.Font("Yu Gothic", 1, 18)); // NOI18N
        comboQuestionLevel.setForeground(new java.awt.Color(47, 79, 79));
        comboQuestionLevel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Question Level" }));
        comboQuestionLevel.setToolTipText("");
        backgroundPanel.add(comboQuestionLevel, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 180, 330, 40));

        getContentPane().add(backgroundPanel, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (txtDescription.getText().trim().isEmpty() == false && comboDesicipline.getSelectedIndex()>0 && 
                comboGroup.getSelectedIndex()>0 && comboQuestionLevel.getSelectedIndex()>0 && comboYear.getSelectedIndex()>0) {
            PaperDescriptionModel paperDescriptionModel = new PaperDescriptionModel();
            paperDescriptionModel.setPaperDescription(txtDescription.getText().trim());
            paperDescriptionModel.setPaperYear(comboYear.getSelectedItem().toString());
            QuestionLevelModel questionLevelModel = new QuestionLevelModel();
            questionLevelModel.setQuestionLevel(comboQuestionLevel.getSelectedItem().toString());
            paperDescriptionModel.setQuestionLevelModel(questionLevelModel);
            PaperDescriptionDAO paperDescriptionDAO = new PaperDescriptionDAOImpl();
            paperDescriptionModel.setPaperDescriptionId(paperDescriptionId);
            int row = paperDescriptionDAO.addPaperDescription(paperDescriptionModel);
            if(row>0) {
                populateDescriptionTable();
                clearFields();
                btnAdd.setEnabled(true);
                btnDelete.setEnabled(false);
                btnUpdate.setEnabled(false);
            }
            else {
                JOptionPane.showMessageDialog(rootPane, "Record Not UPDATED!");
            }
        }
        else {
            JOptionPane.showMessageDialog(rootPane, "Please Fill Fields!");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (txtDescription.getText().trim().isEmpty() == false && comboDesicipline.getSelectedIndex()>0 && 
                comboGroup.getSelectedIndex()>0 && comboQuestionLevel.getSelectedIndex()>0 && comboYear.getSelectedIndex()>0) {
            PaperDescriptionModel paperDescriptionModel = new PaperDescriptionModel();
            paperDescriptionModel.setPaperDescription(txtDescription.getText().trim());
            paperDescriptionModel.setPaperYear(comboYear.getSelectedItem().toString());
            QuestionLevelModel questionLevelModel = new QuestionLevelModel();
            questionLevelModel.setQuestionLevel(comboQuestionLevel.getSelectedItem().toString());
            paperDescriptionModel.setQuestionLevelModel(questionLevelModel);
            PaperDescriptionDAO paperDescriptionDAO = new PaperDescriptionDAOImpl();
            int row = paperDescriptionDAO.addPaperDescription(paperDescriptionModel);
            if(row>0) {
                populateDescriptionTable();
                clearFields();
            }
            else {
                JOptionPane.showMessageDialog(rootPane, "Record Not ADDED!");
            }
        }
        else {
            JOptionPane.showMessageDialog(rootPane, "Please Fill Fields!");
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        Integer confirm = JOptionPane.showConfirmDialog(rootPane, "Do you realy want to delete", "Delete", JOptionPane.YES_NO_OPTION);
        if(confirm == 0) {
            PaperDescriptionModel descriptionModel = new PaperDescriptionModel();
            descriptionModel.setPaperDescriptionId(paperDescriptionId);
            PaperDescriptionDAO descriptionDAO = new PaperDescriptionDAOImpl();
            int row = descriptionDAO.deletePaperDescription(descriptionModel);
            if(row>0) {
                populateDescriptionTable();
                clearFields();
                btnAdd.setEnabled(true);
                btnDelete.setEnabled(false);
                btnUpdate.setEnabled(false);
            }
            else {
                JOptionPane.showMessageDialog(rootPane, "Record Not DELETED!");
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clearFields();
        btnAdd.setEnabled(true);
        btnUpdate.setEnabled(false);
        btnDelete.setEnabled(false);
    }//GEN-LAST:event_btnClearActionPerformed

    private void txtDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescriptionActionPerformed
        txtRemarks.requestFocus();
    }//GEN-LAST:event_txtDescriptionActionPerformed

    private void descriptionTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_descriptionTableMouseClicked

    }//GEN-LAST:event_descriptionTableMouseClicked

    private void comboDesiciplineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDesiciplineActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboDesiciplineActionPerformed

    private void comboGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboGroupActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboGroupActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DescriptionDialoge.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DescriptionDialoge.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DescriptionDialoge.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DescriptionDialoge.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DescriptionDialoge dialog = new DescriptionDialoge(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JLabel btnLabel;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> comboDesicipline;
    private javax.swing.JComboBox<String> comboGroup;
    private javax.swing.JComboBox<String> comboQuestionLevel;
    private javax.swing.JComboBox<String> comboYear;
    private javax.swing.JTable descriptionTable;
    private javax.swing.JLabel headingLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbDescription;
    private javax.swing.JLabel lbRemarks;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JTextField txtDescription;
    private javax.swing.JTextArea txtRemarks;
    // End of variables declaration//GEN-END:variables

    private void clearFields() {
        txtDescription.setText(null);
        txtRemarks.setText(null);
        comboDesicipline.setSelectedIndex(0);
        comboGroup.setSelectedIndex(0);
        comboQuestionLevel.setSelectedIndex(0);
        comboYear.setSelectedIndex(0);
    }
    
    public static DefaultTableModel buildTableModel(ResultSet rs) throws SQLException {
        ResultSetMetaData metaData = rs.getMetaData();
        // names of columns
        Vector<String> columnNames = new Vector<String>();
        int columnCount = metaData.getColumnCount();
        for (int column = 1; column <= columnCount; column++) {
            columnNames.add(metaData.getColumnName(column));
        }
        // data of the table
        Vector<Vector<Object>> data = new Vector<Vector<Object>>();
        while (rs.next()) {
            Vector<Object> vector = new Vector<Object>();
            for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                vector.add(rs.getObject(columnIndex));
            }
            data.add(vector);
        }
        return new DefaultTableModel(data, columnNames);
    }
    
    private  void populateDisciplineCombo() {
        DisciplineDAO disciplineDAO = new DisciplineDAOImpl();
        List<DisciplineModel> discilineModels = disciplineDAO.getAllDisciplines();
        for (DisciplineModel discilineModel : discilineModels) {
            comboDesicipline.addItem(discilineModel.getDisciplineName());
        }
    }
    
    private  void populateGroupCombo() {
        GroupDAO groupDAO = new GroupDAOImpl();
        List<GroupModel> groupModels = groupDAO.getAllGroups();
        for (GroupModel groupModel : groupModels) {
            comboGroup.addItem(groupModel.getGroupName());
        }
    }
    
    private  void populateQuestionLevelCombo() {
        QuestionLevelDAO questionLevelDAO = new QuestionLevelDAOImpl();
        List<QuestionLevelModel> questionLevelModels = questionLevelDAO.getAllQuestionLevel();
        for (QuestionLevelModel questionLevelModel : questionLevelModels) {
            comboQuestionLevel.addItem(questionLevelModel.getQuestionLevel());
        }
    }
    
    private void populateDescriptionTable() {
        PaperDescriptionDAO descriptionDAO = new PaperDescriptionDAOImpl();
        ResultSet rs= descriptionDAO.getAllPaperDescriptionResultSet();
        DefaultTableModel dtm = null;
        try {
            dtm = buildTableModel(rs);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        descriptionTable.setModel(dtm);
    }
}
